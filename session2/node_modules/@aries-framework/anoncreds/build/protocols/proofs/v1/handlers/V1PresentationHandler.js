"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1PresentationHandler = void 0;
const core_1 = require("@aries-framework/core");
const messages_1 = require("../messages");
class V1PresentationHandler {
    constructor(proofProtocol) {
        this.supportedMessages = [messages_1.V1PresentationMessage];
        this.proofProtocol = proofProtocol;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofProtocol.processPresentation(messageContext);
        const shouldAutoRespond = await this.proofProtocol.shouldAutoRespondToPresentation(messageContext.agentContext, {
            presentationMessage: messageContext.message,
            proofRecord,
        });
        if (shouldAutoRespond) {
            return await this.acceptPresentation(proofRecord, messageContext);
        }
    }
    async acceptPresentation(proofRecord, messageContext) {
        messageContext.agentContext.config.logger.info(`Automatically sending acknowledgement with autoAccept`);
        if (messageContext.connection) {
            const { message } = await this.proofProtocol.acceptPresentation(messageContext.agentContext, {
                proofRecord,
            });
            return new core_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                connection: messageContext.connection,
                associatedRecord: proofRecord,
            });
        }
        else if (messageContext.message.service) {
            const { message } = await this.proofProtocol.acceptPresentation(messageContext.agentContext, {
                proofRecord,
            });
            const didCommMessageRepository = messageContext.agentContext.dependencyManager.resolve(core_1.DidCommMessageRepository);
            const requestMessage = await didCommMessageRepository.findAgentMessage(messageContext.agentContext, {
                associatedRecordId: proofRecord.id,
                messageClass: messages_1.V1RequestPresentationMessage,
            });
            const recipientService = messageContext.message.service;
            const ourService = requestMessage === null || requestMessage === void 0 ? void 0 : requestMessage.service;
            if (!ourService) {
                messageContext.agentContext.config.logger.error(`Could not automatically create presentation ack. Missing ourService on request message`);
                return;
            }
            return new core_1.OutboundMessageContext(message, {
                agentContext: messageContext.agentContext,
                serviceParams: {
                    service: recipientService.resolvedDidCommService,
                    senderKey: ourService.resolvedDidCommService.recipientKeys[0],
                    returnRoute: true,
                },
            });
        }
        messageContext.agentContext.config.logger.error(`Could not automatically create presentation ack`);
    }
}
exports.V1PresentationHandler = V1PresentationHandler;
//# sourceMappingURL=V1PresentationHandler.js.map