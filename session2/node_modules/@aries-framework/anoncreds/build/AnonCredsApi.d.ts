import type { AnonCredsCreateLinkSecretOptions, AnonCredsRegisterCredentialDefinitionOptions } from './AnonCredsApiOptions';
import type { GetCredentialDefinitionReturn, GetRevocationStatusListReturn, GetRevocationRegistryDefinitionReturn, GetSchemaReturn, RegisterCredentialDefinitionReturn, RegisterSchemaOptions, RegisterSchemaReturn, GetCredentialsOptions } from './services';
import type { Extensible } from './services/registry/base';
import { AgentContext } from '@aries-framework/core';
import { AnonCredsModuleConfig } from './AnonCredsModuleConfig';
import { AnonCredsCredentialDefinitionPrivateRepository, AnonCredsKeyCorrectnessProofRepository, AnonCredsLinkSecretRepository } from './repository';
import { AnonCredsCredentialDefinitionRepository } from './repository/AnonCredsCredentialDefinitionRepository';
import { AnonCredsSchemaRepository } from './repository/AnonCredsSchemaRepository';
import { AnonCredsIssuerService, AnonCredsHolderService } from './services';
import { AnonCredsRegistryService } from './services/registry/AnonCredsRegistryService';
export declare class AnonCredsApi {
    config: AnonCredsModuleConfig;
    private agentContext;
    private anonCredsRegistryService;
    private anonCredsSchemaRepository;
    private anonCredsCredentialDefinitionRepository;
    private anonCredsCredentialDefinitionPrivateRepository;
    private anonCredsKeyCorrectnessProofRepository;
    private anonCredsLinkSecretRepository;
    private anonCredsIssuerService;
    private anonCredsHolderService;
    constructor(agentContext: AgentContext, anonCredsRegistryService: AnonCredsRegistryService, config: AnonCredsModuleConfig, anonCredsIssuerService: AnonCredsIssuerService, anonCredsHolderService: AnonCredsHolderService, anonCredsSchemaRepository: AnonCredsSchemaRepository, anonCredsCredentialDefinitionRepository: AnonCredsCredentialDefinitionRepository, anonCredsCredentialDefinitionPrivateRepository: AnonCredsCredentialDefinitionPrivateRepository, anonCredsKeyCorrectnessProofRepository: AnonCredsKeyCorrectnessProofRepository, anonCredsLinkSecretRepository: AnonCredsLinkSecretRepository);
    /**
     * Create a Link Secret, optionally indicating its ID and if it will be the default one
     * If there is no default Link Secret, this will be set as default (even if setAsDefault is true).
     *
     */
    createLinkSecret(options?: AnonCredsCreateLinkSecretOptions): Promise<void>;
    /**
     * Get a list of ids for the created link secrets
     */
    getLinkSecretIds(): Promise<string[]>;
    /**
     * Retrieve a {@link AnonCredsSchema} from the registry associated
     * with the {@link schemaId}
     */
    getSchema(schemaId: string): Promise<GetSchemaReturn>;
    registerSchema(options: RegisterSchemaOptions): Promise<RegisterSchemaReturn>;
    /**
     * Retrieve a {@link AnonCredsCredentialDefinition} from the registry associated
     * with the {@link credentialDefinitionId}
     */
    getCredentialDefinition(credentialDefinitionId: string): Promise<GetCredentialDefinitionReturn>;
    registerCredentialDefinition(options: {
        credentialDefinition: AnonCredsRegisterCredentialDefinitionOptions;
        options: Extensible;
    }): Promise<RegisterCredentialDefinitionReturn>;
    /**
     * Retrieve a {@link AnonCredsRevocationRegistryDefinition} from the registry associated
     * with the {@link revocationRegistryDefinitionId}
     */
    getRevocationRegistryDefinition(revocationRegistryDefinitionId: string): Promise<GetRevocationRegistryDefinitionReturn>;
    /**
     * Retrieve the {@link AnonCredsRevocationStatusList} for the given {@link timestamp} from the registry associated
     * with the {@link revocationRegistryDefinitionId}
     */
    getRevocationStatusList(revocationRegistryDefinitionId: string, timestamp: number): Promise<GetRevocationStatusListReturn>;
    getCredential(credentialId: string): Promise<import("./models").AnonCredsCredentialInfo>;
    getCredentials(options: GetCredentialsOptions): Promise<import("./models").AnonCredsCredentialInfo[]>;
    private storeCredentialDefinitionRecord;
    private storeSchemaRecord;
    private findRegistryForIdentifier;
}
