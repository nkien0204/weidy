import type { Jwk } from './JwkTypes';
import type { Jws, JwsGeneralFormat } from './JwsTypes';
import type { AgentContext } from '../agent';
import type { Buffer } from '../utils';
import { Key } from './Key';
import { KeyType } from './KeyType';
export declare class JwsService {
    static supportedKeyTypes: KeyType[];
    private createJwsBase;
    createJws(agentContext: AgentContext, { payload, key, header, protectedHeaderOptions }: CreateJwsOptions): Promise<JwsGeneralFormat>;
    /**
     *  @see {@link https://www.rfc-editor.org/rfc/rfc7515#section-3.1}
     * */
    createJwsCompact(agentContext: AgentContext, { payload, key, protectedHeaderOptions }: CreateCompactJwsOptions): Promise<string>;
    /**
     * Verify a JWS
     */
    verifyJws(agentContext: AgentContext, { jws, payload }: VerifyJwsOptions): Promise<VerifyJwsResult>;
    private buildProtected;
}
export interface CreateJwsOptions {
    key: Key;
    payload: Buffer;
    header: Record<string, unknown>;
    protectedHeaderOptions: ProtectedHeaderOptions;
}
type CreateCompactJwsOptions = Omit<CreateJwsOptions, 'header'>;
export interface VerifyJwsOptions {
    jws: Jws;
    payload: Buffer;
}
export interface VerifyJwsResult {
    isValid: boolean;
    signerKeys: Key[];
}
export type kid = string;
export interface ProtectedHeaderOptions {
    alg: string;
    jwk?: Jwk;
    kid?: kid;
    [key: string]: any;
}
export {};
