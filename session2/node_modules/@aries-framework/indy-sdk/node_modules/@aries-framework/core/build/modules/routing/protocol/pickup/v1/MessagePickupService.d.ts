import type { BatchPickupMessage } from './messages';
import type { InboundMessageContext } from '../../../../../agent/models/InboundMessageContext';
import type { EncryptedMessage } from '../../../../../types';
import { EventEmitter } from '../../../../../agent/EventEmitter';
import { MessageHandlerRegistry } from '../../../../../agent/MessageHandlerRegistry';
import { OutboundMessageContext } from '../../../../../agent/models';
import { MessageRepository } from '../../../../../storage/MessageRepository';
import { BatchMessage } from './messages';
export declare class MessagePickupService {
    private messageRepository;
    private eventEmitter;
    constructor(messageRepository: MessageRepository, messageHandlerRegistry: MessageHandlerRegistry, eventEmitter: EventEmitter);
    batch(messageContext: InboundMessageContext<BatchPickupMessage>): Promise<OutboundMessageContext<BatchMessage>>;
    queueMessage(connectionId: string, message: EncryptedMessage): Promise<void>;
    protected registerMessageHandlers(messageHandlerRegistry: MessageHandlerRegistry): void;
}
