"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkWallet = void 0;
// eslint-disable-next-line import/order
const core_1 = require("@aries-framework/core");
const isError = (error) => error instanceof Error;
const tsyringe_1 = require("tsyringe");
const error_1 = require("../error");
const types_1 = require("../types");
let IndySdkWallet = class IndySdkWallet {
    constructor(indySdk, logger, signingKeyProviderRegistry) {
        this.logger = logger;
        this.signingKeyProviderRegistry = signingKeyProviderRegistry;
        this.indySdk = indySdk;
    }
    get isProvisioned() {
        return this.walletConfig !== undefined;
    }
    get isInitialized() {
        return this.walletHandle !== undefined;
    }
    get handle() {
        if (!this.walletHandle) {
            throw new core_1.AriesFrameworkError('Wallet has not been initialized yet. Make sure to await agent.initialize() before using the agent.');
        }
        return this.walletHandle;
    }
    /**
     * Dispose method is called when an agent context is disposed.
     */
    async dispose() {
        if (this.isInitialized) {
            await this.close();
        }
    }
    walletStorageConfig(walletConfig) {
        var _a, _b, _c;
        const walletStorageConfig = {
            id: walletConfig.id,
            storage_type: (_a = walletConfig.storage) === null || _a === void 0 ? void 0 : _a.type,
        };
        if ((_b = walletConfig.storage) === null || _b === void 0 ? void 0 : _b.config) {
            walletStorageConfig.storage_config = (_c = walletConfig.storage) === null || _c === void 0 ? void 0 : _c.config;
        }
        return walletStorageConfig;
    }
    walletCredentials(walletConfig, rekey, rekeyDerivation) {
        var _a, _b;
        const walletCredentials = {
            key: walletConfig.key,
            key_derivation_method: walletConfig.keyDerivationMethod,
        };
        if (rekey) {
            walletCredentials.rekey = rekey;
        }
        if (rekeyDerivation) {
            walletCredentials.rekey_derivation_method = rekeyDerivation;
        }
        if ((_a = walletConfig.storage) === null || _a === void 0 ? void 0 : _a.credentials) {
            walletCredentials.storage_credentials = (_b = walletConfig.storage) === null || _b === void 0 ? void 0 : _b.credentials;
        }
        return walletCredentials;
    }
    /**
     * @throws {WalletDuplicateError} if the wallet already exists
     * @throws {WalletError} if another error occurs
     */
    async create(walletConfig) {
        await this.createAndOpen(walletConfig);
        await this.close();
    }
    /**
     * @throws {WalletDuplicateError} if the wallet already exists
     * @throws {WalletError} if another error occurs
     */
    async createAndOpen(walletConfig) {
        this.logger.debug(`Creating wallet '${walletConfig.id}' using SQLite storage`);
        try {
            await this.indySdk.createWallet(this.walletStorageConfig(walletConfig), this.walletCredentials(walletConfig));
            this.walletConfig = walletConfig;
            await this.open(walletConfig);
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletAlreadyExistsError')) {
                const errorMessage = `Wallet '${walletConfig.id}' already exists`;
                this.logger.debug(errorMessage);
                throw new core_1.WalletDuplicateError(errorMessage, {
                    walletType: 'IndySdkWallet',
                    cause: error,
                });
            }
            else {
                if (!isError(error)) {
                    throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
                }
                const errorMessage = `Error creating wallet '${walletConfig.id}'`;
                this.logger.error(errorMessage, {
                    error,
                    errorMessage: error.message,
                });
                throw new core_1.WalletError(errorMessage, { cause: error });
            }
        }
        this.logger.debug(`Successfully created wallet '${walletConfig.id}'`);
    }
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    async open(walletConfig) {
        await this._open(walletConfig);
    }
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    async rotateKey(walletConfig) {
        if (!walletConfig.rekey) {
            throw new core_1.WalletError('Wallet rekey undefined!. Please specify the new wallet key');
        }
        await this._open({
            id: walletConfig.id,
            key: walletConfig.key,
            keyDerivationMethod: walletConfig.keyDerivationMethod,
        }, walletConfig.rekey, walletConfig.rekeyDerivationMethod);
    }
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    async _open(walletConfig, rekey, rekeyDerivation) {
        if (this.walletHandle) {
            throw new core_1.WalletError('Wallet instance already opened. Close the currently opened wallet before re-opening the wallet');
        }
        try {
            this.walletHandle = await this.indySdk.openWallet(this.walletStorageConfig(walletConfig), this.walletCredentials(walletConfig, rekey, rekeyDerivation));
            if (rekey) {
                this.walletConfig = Object.assign(Object.assign({}, walletConfig), { key: rekey, keyDerivationMethod: rekeyDerivation });
            }
            else {
                this.walletConfig = walletConfig;
            }
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletNotFoundError')) {
                const errorMessage = `Wallet '${walletConfig.id}' not found`;
                this.logger.debug(errorMessage);
                throw new core_1.WalletNotFoundError(errorMessage, {
                    walletType: 'IndySdkWallet',
                    cause: error,
                });
            }
            else if ((0, error_1.isIndyError)(error, 'WalletAccessFailed')) {
                const errorMessage = `Incorrect key for wallet '${walletConfig.id}'`;
                this.logger.debug(errorMessage);
                throw new core_1.WalletInvalidKeyError(errorMessage, {
                    walletType: 'IndySdkWallet',
                    cause: error,
                });
            }
            else {
                if (!isError(error)) {
                    throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
                }
                const errorMessage = `Error opening wallet '${walletConfig.id}': ${error.message}`;
                this.logger.error(errorMessage, {
                    error,
                    errorMessage: error.message,
                });
                throw new core_1.WalletError(errorMessage, { cause: error });
            }
        }
        this.logger.debug(`Wallet '${walletConfig.id}' opened with handle '${this.handle}'`);
    }
    /**
     * @throws {WalletNotFoundError} if the wallet does not exist
     * @throws {WalletError} if another error occurs
     */
    async delete() {
        if (!this.walletConfig) {
            throw new core_1.WalletError('Can not delete wallet that does not have wallet config set. Make sure to call create wallet before deleting the wallet');
        }
        this.logger.info(`Deleting wallet '${this.walletConfig.id}'`);
        if (this.walletHandle) {
            await this.close();
        }
        try {
            await this.indySdk.deleteWallet(this.walletStorageConfig(this.walletConfig), this.walletCredentials(this.walletConfig));
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletNotFoundError')) {
                const errorMessage = `Error deleting wallet: wallet '${this.walletConfig.id}' not found`;
                this.logger.debug(errorMessage);
                throw new core_1.WalletNotFoundError(errorMessage, {
                    walletType: 'IndySdkWallet',
                    cause: error,
                });
            }
            else {
                if (!isError(error)) {
                    throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
                }
                const errorMessage = `Error deleting wallet '${this.walletConfig.id}': ${error.message}`;
                this.logger.error(errorMessage, {
                    error,
                    errorMessage: error.message,
                });
                throw new core_1.WalletError(errorMessage, { cause: error });
            }
        }
    }
    async export(exportConfig) {
        var _a;
        try {
            this.logger.debug(`Exporting wallet ${(_a = this.walletConfig) === null || _a === void 0 ? void 0 : _a.id} to path ${exportConfig.path}`);
            await this.indySdk.exportWallet(this.handle, exportConfig);
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            // Export path already exists
            if ((0, error_1.isIndyError)(error, 'CommonIOError')) {
                throw new core_1.WalletExportPathExistsError(`Unable to create export, wallet export at path '${exportConfig.path}' already exists`, { cause: error });
            }
            const errorMessage = `Error exporting wallet: ${error.message}`;
            this.logger.error(errorMessage, {
                error,
            });
            throw new core_1.WalletError(errorMessage, { cause: error });
        }
    }
    async import(walletConfig, importConfig) {
        try {
            this.logger.debug(`Importing wallet ${walletConfig.id} from path ${importConfig.path}`);
            await this.indySdk.importWallet({ id: walletConfig.id }, { key: walletConfig.key, key_derivation_method: walletConfig.keyDerivationMethod }, importConfig);
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            const errorMessage = `Error importing wallet': ${error.message}`;
            this.logger.error(errorMessage, {
                error,
            });
            throw new core_1.WalletError(errorMessage, { cause: error });
        }
    }
    /**
     * @throws {WalletError} if the wallet is already closed or another error occurs
     */
    async close() {
        var _a;
        this.logger.debug(`Closing wallet ${(_a = this.walletConfig) === null || _a === void 0 ? void 0 : _a.id}`);
        if (!this.walletHandle) {
            throw new core_1.WalletError('Wallet is in invalid state, you are trying to close wallet that has no `walletHandle`.');
        }
        try {
            await this.indySdk.closeWallet(this.walletHandle);
            this.walletHandle = undefined;
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletInvalidHandle')) {
                const errorMessage = `Error closing wallet: wallet already closed`;
                this.logger.debug(errorMessage);
                throw new core_1.WalletError(errorMessage, {
                    cause: error,
                });
            }
            else {
                if (!isError(error)) {
                    throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
                }
                const errorMessage = `Error closing wallet': ${error.message}`;
                this.logger.error(errorMessage, {
                    error,
                    errorMessage: error.message,
                });
                throw new core_1.WalletError(errorMessage, { cause: error });
            }
        }
    }
    /**
     * Create a key with an optional private key and keyType.
     * The keypair is also automatically stored in the wallet afterwards
     *
     * Bls12381g1g2 and X25519 are not supported.
     */
    async createKey({ seed, privateKey, keyType }) {
        try {
            if (seed && privateKey) {
                throw new core_1.WalletError('Only one of seed and privateKey can be set');
            }
            if (seed && !(0, core_1.isValidSeed)(seed, keyType)) {
                throw new core_1.WalletError('Invalid seed provided');
            }
            if (privateKey && !(0, core_1.isValidPrivateKey)(privateKey, keyType)) {
                throw new core_1.WalletError('Invalid private key provided');
            }
            // Ed25519 is supported natively in Indy wallet
            if (keyType === core_1.KeyType.Ed25519) {
                if (seed) {
                    throw new core_1.WalletError('IndySdkWallet does not support seed. You may rather want to specify a private key for deterministic ed25519 key generation');
                }
                try {
                    const verkey = await this.indySdk.createKey(this.handle, {
                        seed: privateKey === null || privateKey === void 0 ? void 0 : privateKey.toString(),
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        //@ts-ignore
                        crypto_type: 'ed25519',
                    });
                    return core_1.Key.fromPublicKeyBase58(verkey, keyType);
                }
                catch (error) {
                    // Handle case where key already exists
                    if ((0, error_1.isIndyError)(error, 'WalletItemAlreadyExists')) {
                        throw new core_1.WalletKeyExistsError('Key already exists');
                    }
                    // Otherwise re-throw error
                    throw error;
                }
            }
            // Check if there is a signing key provider for the specified key type.
            if (this.signingKeyProviderRegistry.hasProviderForKeyType(keyType)) {
                const signingKeyProvider = this.signingKeyProviderRegistry.getProviderForKeyType(keyType);
                const keyPair = await signingKeyProvider.createKeyPair({ seed, privateKey });
                await this.storeKeyPair(keyPair);
                return core_1.Key.fromPublicKeyBase58(keyPair.publicKeyBase58, keyType);
            }
        }
        catch (error) {
            // If already instance of `WalletError`, re-throw
            if (error instanceof core_1.WalletError)
                throw error;
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError(`Attempted to throw error, but it was not of type Error: ${error}`, {
                    cause: error,
                });
            }
            throw new core_1.WalletError(`Error creating key with key type '${keyType}': ${error.message}`, { cause: error });
        }
        throw new core_1.WalletError(`Unsupported key type: '${keyType}' for wallet IndySdkWallet`);
    }
    /**
     * sign a Buffer with an instance of a Key class
     *
     * Bls12381g1g2, Bls12381g1 and X25519 are not supported.
     *
     * @param data Buffer The data that needs to be signed
     * @param key Key The key that is used to sign the data
     *
     * @returns A signature for the data
     */
    async sign({ data, key }) {
        try {
            // Ed25519 is supported natively in Indy wallet
            if (key.keyType === core_1.KeyType.Ed25519) {
                // Checks to see if it is an not an Array of messages, but just a single one
                if (!core_1.TypedArrayEncoder.isTypedArray(data)) {
                    throw new core_1.WalletError(`${core_1.KeyType.Ed25519} does not support multiple singing of multiple messages`);
                }
                return await this.indySdk.cryptoSign(this.handle, key.publicKeyBase58, data);
            }
            // Check if there is a signing key provider for the specified key type.
            if (this.signingKeyProviderRegistry.hasProviderForKeyType(key.keyType)) {
                const signingKeyProvider = this.signingKeyProviderRegistry.getProviderForKeyType(key.keyType);
                const keyPair = await this.retrieveKeyPair(key.publicKeyBase58);
                const signed = await signingKeyProvider.sign({
                    data,
                    privateKeyBase58: keyPair.privateKeyBase58,
                    publicKeyBase58: key.publicKeyBase58,
                });
                return signed;
            }
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            throw new core_1.WalletError(`Error signing data with verkey ${key.publicKeyBase58}`, { cause: error });
        }
        throw new core_1.WalletError(`Unsupported keyType: ${key.keyType}`);
    }
    /**
     * Verify the signature with the data and the used key
     *
     * Bls12381g1g2, Bls12381g1 and X25519 are not supported.
     *
     * @param data Buffer The data that has to be confirmed to be signed
     * @param key Key The key that was used in the signing process
     * @param signature Buffer The signature that was created by the signing process
     *
     * @returns A boolean whether the signature was created with the supplied data and key
     *
     * @throws {WalletError} When it could not do the verification
     * @throws {WalletError} When an unsupported keytype is used
     */
    async verify({ data, key, signature }) {
        try {
            // Ed25519 is supported natively in Indy wallet
            if (key.keyType === core_1.KeyType.Ed25519) {
                // Checks to see if it is an not an Array of messages, but just a single one
                if (!core_1.TypedArrayEncoder.isTypedArray(data)) {
                    throw new core_1.WalletError(`${core_1.KeyType.Ed25519} does not support multiple singing of multiple messages`);
                }
                return await this.indySdk.cryptoVerify(key.publicKeyBase58, data, signature);
            }
            // Check if there is a signing key provider for the specified key type.
            if (this.signingKeyProviderRegistry.hasProviderForKeyType(key.keyType)) {
                const signingKeyProvider = this.signingKeyProviderRegistry.getProviderForKeyType(key.keyType);
                const signed = await signingKeyProvider.verify({
                    data,
                    signature,
                    publicKeyBase58: key.publicKeyBase58,
                });
                return signed;
            }
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            throw new core_1.WalletError(`Error verifying signature of data signed with verkey ${key.publicKeyBase58}`, {
                cause: error,
            });
        }
        throw new core_1.WalletError(`Unsupported keyType: ${key.keyType}`);
    }
    async pack(payload, recipientKeys, senderVerkey) {
        try {
            const messageRaw = core_1.JsonEncoder.toBuffer(payload);
            const packedMessage = await this.indySdk.packMessage(this.handle, messageRaw, recipientKeys, senderVerkey !== null && senderVerkey !== void 0 ? senderVerkey : null);
            return core_1.JsonEncoder.fromBuffer(packedMessage);
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            throw new core_1.WalletError('Error packing message', { cause: error });
        }
    }
    async unpack(messagePackage) {
        try {
            const unpackedMessageBuffer = await this.indySdk.unpackMessage(this.handle, core_1.JsonEncoder.toBuffer(messagePackage));
            const unpackedMessage = core_1.JsonEncoder.fromBuffer(unpackedMessageBuffer);
            return {
                senderKey: unpackedMessage.sender_verkey,
                recipientKey: unpackedMessage.recipient_verkey,
                plaintextMessage: core_1.JsonEncoder.fromString(unpackedMessage.message),
            };
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            throw new core_1.WalletError('Error unpacking message', { cause: error });
        }
    }
    async generateNonce() {
        try {
            return await this.indySdk.generateNonce();
        }
        catch (error) {
            if (!isError(error)) {
                throw new core_1.AriesFrameworkError('Attempted to throw error, but it was not of type Error', { cause: error });
            }
            throw new core_1.WalletError('Error generating nonce', { cause: error });
        }
    }
    async retrieveKeyPair(publicKeyBase58) {
        try {
            const { value } = await this.indySdk.getWalletRecord(this.handle, 'KeyPairRecord', `key-${publicKeyBase58}`, {});
            if (value) {
                return core_1.JsonEncoder.fromString(value);
            }
            else {
                throw new core_1.WalletError(`No content found for record with public key: ${publicKeyBase58}`);
            }
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletItemNotFound')) {
                throw new core_1.RecordNotFoundError(`KeyPairRecord not found for public key: ${publicKeyBase58}.`, {
                    recordType: 'KeyPairRecord',
                    cause: error,
                });
            }
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async storeKeyPair(keyPair) {
        try {
            await this.indySdk.addWalletRecord(this.handle, 'KeyPairRecord', `key-${keyPair.publicKeyBase58}`, JSON.stringify(keyPair), {
                keyType: keyPair.keyType,
            });
        }
        catch (error) {
            if ((0, error_1.isIndyError)(error, 'WalletItemAlreadyExists')) {
                throw new core_1.WalletKeyExistsError('Key already exists');
            }
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async generateWalletKey() {
        try {
            return await this.indySdk.generateWalletKey();
        }
        catch (error) {
            throw new core_1.WalletError('Error generating wallet key', { cause: error });
        }
    }
};
IndySdkWallet = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.IndySdkSymbol)),
    __param(1, (0, tsyringe_1.inject)(core_1.InjectionSymbols.Logger)),
    __metadata("design:paramtypes", [Object, Object, core_1.SigningProviderRegistry])
], IndySdkWallet);
exports.IndySdkWallet = IndySdkWallet;
//# sourceMappingURL=IndySdkWallet.js.map