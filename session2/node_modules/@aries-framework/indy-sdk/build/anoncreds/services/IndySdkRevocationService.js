"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkRevocationService = void 0;
const core_1 = require("@aries-framework/core");
const error_1 = require("../../error");
const types_1 = require("../../types");
const tails_1 = require("../utils/tails");
const transform_1 = require("../utils/transform");
var RequestReferentType;
(function (RequestReferentType) {
    RequestReferentType["Attribute"] = "attribute";
    RequestReferentType["Predicate"] = "predicate";
    RequestReferentType["SelfAttestedAttribute"] = "self-attested-attribute";
})(RequestReferentType || (RequestReferentType = {}));
/**
 * Internal class that handles revocation related logic for the Indy SDK
 *
 * @internal
 */
let IndySdkRevocationService = class IndySdkRevocationService {
    constructor(indySdk) {
        this.indySdk = indySdk;
    }
    /**
     * Creates the revocation state for the requested credentials in a format that the Indy SDK expects.
     */
    async createRevocationState(agentContext, proofRequest, selectedCredentials, revocationRegistries) {
        var _a, _b;
        try {
            agentContext.config.logger.debug(`Creating Revocation State(s) for proof request`, {
                proofRequest,
                selectedCredentials,
            });
            const indyRevocationStates = {};
            const referentCredentials = [];
            //Retrieve information for referents and push to single array
            for (const [referent, selectedCredential] of Object.entries((_a = selectedCredentials.attributes) !== null && _a !== void 0 ? _a : {})) {
                referentCredentials.push({
                    referent,
                    credentialInfo: selectedCredential.credentialInfo,
                    type: RequestReferentType.Attribute,
                    referentRevocationInterval: proofRequest.requested_attributes[referent].non_revoked,
                });
            }
            for (const [referent, selectedCredential] of Object.entries((_b = selectedCredentials.predicates) !== null && _b !== void 0 ? _b : {})) {
                referentCredentials.push({
                    referent,
                    credentialInfo: selectedCredential.credentialInfo,
                    type: RequestReferentType.Predicate,
                    referentRevocationInterval: proofRequest.requested_predicates[referent].non_revoked,
                });
            }
            for (const { referent, credentialInfo, type, referentRevocationInterval } of referentCredentials) {
                // Prefer referent-specific revocation interval over global revocation interval
                const requestRevocationInterval = referentRevocationInterval !== null && referentRevocationInterval !== void 0 ? referentRevocationInterval : proofRequest.non_revoked;
                const credentialRevocationId = credentialInfo.credentialRevocationId;
                const revocationRegistryId = credentialInfo.revocationRegistryId;
                // If revocation interval is present and the credential is revocable then create revocation state
                if (requestRevocationInterval && credentialRevocationId && revocationRegistryId) {
                    agentContext.config.logger.trace(`Presentation is requesting proof of non revocation for ${type} referent '${referent}', creating revocation state for credential`, {
                        requestRevocationInterval,
                        credentialRevocationId,
                        revocationRegistryId,
                    });
                    this.assertRevocationInterval(requestRevocationInterval);
                    const { definition, revocationStatusLists, tailsFilePath } = revocationRegistries[revocationRegistryId];
                    // NOTE: we assume that the revocationStatusLists have been added based on timestamps of the `to` query. On a higher level it means we'll find the
                    // most accurate revocation list for a given timestamp. It doesn't have to be that the revocationStatusList is from the `to` timestamp however.
                    const revocationStatusList = revocationStatusLists[requestRevocationInterval.to];
                    const tails = await (0, tails_1.createTailsReader)(agentContext, tailsFilePath);
                    const revocationState = await this.indySdk.createRevocationState(tails, (0, transform_1.indySdkRevocationRegistryDefinitionFromAnonCreds)(revocationRegistryId, definition), (0, transform_1.indySdkRevocationDeltaFromAnonCreds)(revocationStatusList), revocationStatusList.timestamp, credentialRevocationId);
                    const timestamp = revocationState.timestamp;
                    if (!indyRevocationStates[revocationRegistryId]) {
                        indyRevocationStates[revocationRegistryId] = {};
                    }
                    indyRevocationStates[revocationRegistryId][timestamp] = revocationState;
                }
            }
            agentContext.config.logger.debug(`Created Revocation States for Proof Request`, {
                indyRevocationStates,
            });
            return indyRevocationStates;
        }
        catch (error) {
            agentContext.config.logger.error(`Error creating Indy Revocation State for Proof Request`, {
                error,
                proofRequest,
                selectedCredentials,
            });
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    // TODO: Add Test
    // TODO: we should do this verification on a higher level I think?
    // Check revocation interval in accordance with https://github.com/hyperledger/aries-rfcs/blob/main/concepts/0441-present-proof-best-practices/README.md#semantics-of-non-revocation-interval-endpoints
    assertRevocationInterval(revocationInterval) {
        if (!revocationInterval.to) {
            throw new core_1.AriesFrameworkError(`Presentation requests proof of non-revocation with no 'to' value specified`);
        }
        if ((revocationInterval.from || revocationInterval.from === 0) &&
            revocationInterval.to !== revocationInterval.from) {
            throw new core_1.AriesFrameworkError(`Presentation requests proof of non-revocation with an interval from: '${revocationInterval.from}' that does not match the interval to: '${revocationInterval.to}', as specified in Aries RFC 0441`);
        }
    }
};
IndySdkRevocationService = __decorate([
    (0, core_1.injectable)(),
    __param(0, (0, core_1.inject)(types_1.IndySdkSymbol)),
    __metadata("design:paramtypes", [Object])
], IndySdkRevocationService);
exports.IndySdkRevocationService = IndySdkRevocationService;
//# sourceMappingURL=IndySdkRevocationService.js.map