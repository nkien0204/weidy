"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkVerifierService = void 0;
const core_1 = require("@aries-framework/core");
const error_1 = require("../../error");
const types_1 = require("../../types");
const identifiers_1 = require("../utils/identifiers");
const transform_1 = require("../utils/transform");
let IndySdkVerifierService = class IndySdkVerifierService {
    constructor(indySdk) {
        this.indySdk = indySdk;
    }
    async verifyProof(agentContext, options) {
        try {
            // The AnonCredsSchema doesn't contain the seqNo anymore. However, the indy credential definition id
            // does contain the seqNo, so we can extract it from the credential definition id.
            const seqNoMap = {};
            // Convert AnonCreds credential definitions to Indy credential definitions
            const indyCredentialDefinitions = {};
            for (const credentialDefinitionId in options.credentialDefinitions) {
                const credentialDefinition = options.credentialDefinitions[credentialDefinitionId];
                indyCredentialDefinitions[credentialDefinitionId] = (0, transform_1.indySdkCredentialDefinitionFromAnonCreds)(credentialDefinitionId, credentialDefinition);
                // Get the seqNo for the schemas so we can use it when transforming the schemas
                const { schemaSeqNo } = (0, identifiers_1.parseCredentialDefinitionId)(credentialDefinitionId);
                seqNoMap[credentialDefinition.schemaId] = Number(schemaSeqNo);
            }
            // Convert AnonCreds schemas to Indy schemas
            const indySchemas = {};
            for (const schemaId in options.schemas) {
                const schema = options.schemas[schemaId];
                indySchemas[schemaId] = (0, transform_1.indySdkSchemaFromAnonCreds)(schemaId, schema, seqNoMap[schemaId]);
            }
            // Convert AnonCreds revocation definitions to Indy revocation definitions
            const indyRevocationDefinitions = {};
            const indyRevocationRegistries = {};
            for (const revocationRegistryDefinitionId in options.revocationRegistries) {
                const { definition, revocationStatusLists } = options.revocationRegistries[revocationRegistryDefinitionId];
                indyRevocationDefinitions[revocationRegistryDefinitionId] = (0, transform_1.indySdkRevocationRegistryDefinitionFromAnonCreds)(revocationRegistryDefinitionId, definition);
                // Initialize empty object for this revocation registry
                indyRevocationRegistries[revocationRegistryDefinitionId] = {};
                // Also transform the revocation lists for the specified timestamps into the revocation registry
                // format Indy expects
                for (const timestamp in revocationStatusLists) {
                    const revocationStatusList = revocationStatusLists[timestamp];
                    indyRevocationRegistries[revocationRegistryDefinitionId][timestamp] =
                        (0, transform_1.indySdkRevocationRegistryFromAnonCreds)(revocationStatusList);
                }
            }
            return await this.indySdk.verifierVerifyProof(options.proofRequest, options.proof, indySchemas, indyCredentialDefinitions, indyRevocationDefinitions, indyRevocationRegistries);
        }
        catch (error) {
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
};
IndySdkVerifierService = __decorate([
    (0, core_1.injectable)(),
    __param(0, (0, core_1.inject)(types_1.IndySdkSymbol)),
    __metadata("design:paramtypes", [Object])
], IndySdkVerifierService);
exports.IndySdkVerifierService = IndySdkVerifierService;
//# sourceMappingURL=IndySdkVerifierService.js.map