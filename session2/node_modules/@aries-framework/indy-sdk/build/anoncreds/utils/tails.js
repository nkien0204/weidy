"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTailsReader = void 0;
const core_1 = require("@aries-framework/core");
const error_1 = require("../../error");
const types_1 = require("../../types");
/**
 * Get a handler for the blob storage tails file reader.
 *
 * @param agentContext The agent context
 * @param tailsFilePath The path of the tails file
 * @returns The blob storage reader handle
 */
async function createTailsReader(agentContext, tailsFilePath) {
    const fileSystem = agentContext.dependencyManager.resolve(core_1.InjectionSymbols.FileSystem);
    const indySdk = agentContext.dependencyManager.resolve(types_1.IndySdkSymbol);
    try {
        agentContext.config.logger.debug(`Opening tails reader at path ${tailsFilePath}`);
        const tailsFileExists = await fileSystem.exists(tailsFilePath);
        // Extract directory from path (should also work with windows paths)
        const dirname = (0, core_1.getDirFromFilePath)(tailsFilePath);
        if (!tailsFileExists) {
            throw new core_1.AriesFrameworkError(`Tails file does not exist at path ${tailsFilePath}`);
        }
        const tailsReaderConfig = {
            base_dir: dirname,
        };
        const tailsReader = await indySdk.openBlobStorageReader('default', tailsReaderConfig);
        agentContext.config.logger.debug(`Opened tails reader at path ${tailsFilePath}`);
        return tailsReader;
    }
    catch (error) {
        if ((0, error_1.isIndyError)(error)) {
            throw new error_1.IndySdkError(error);
        }
        throw error;
    }
}
exports.createTailsReader = createTailsReader;
//# sourceMappingURL=tails.js.map