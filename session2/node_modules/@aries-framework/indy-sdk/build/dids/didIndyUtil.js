"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verificationKeyForIndyDid = exports.createKeyAgreementKey = exports.indyDidDocumentFromDid = exports.parseIndyDid = void 0;
const core_1 = require("@aries-framework/core");
const did_1 = require("../utils/did");
function parseIndyDid(did) {
    const match = did.match(did_1.DID_INDY_REGEX);
    if (match) {
        const [, namespace, namespaceIdentifier] = match;
        return { namespace, namespaceIdentifier };
    }
    else {
        throw new core_1.AriesFrameworkError(`${did} is not a valid did:indy did`);
    }
}
exports.parseIndyDid = parseIndyDid;
// Create a base DIDDoc template according to https://hyperledger.github.io/indy-did-method/#base-diddoc-template
function indyDidDocumentFromDid(did, publicKeyBase58) {
    const verificationMethodId = `${did}#verkey`;
    const builder = new core_1.DidDocumentBuilder(did)
        .addContext('https://w3id.org/security/suites/ed25519-2018/v1')
        .addVerificationMethod({
        controller: did,
        id: verificationMethodId,
        publicKeyBase58,
        type: 'Ed25519VerificationKey2018',
    })
        .addAuthentication(verificationMethodId);
    return builder;
}
exports.indyDidDocumentFromDid = indyDidDocumentFromDid;
function createKeyAgreementKey(verkey) {
    return core_1.TypedArrayEncoder.toBase58((0, core_1.convertPublicKeyToX25519)(core_1.TypedArrayEncoder.fromBase58(verkey)));
}
exports.createKeyAgreementKey = createKeyAgreementKey;
/**
 * Fetches the verification key for a given did:indy did and returns the key as a {@link Key} object.
 *
 * @throws {@link AriesFrameworkError} if the did could not be resolved or the key could not be extracted
 */
async function verificationKeyForIndyDid(agentContext, did) {
    // FIXME: we should store the didDocument in the DidRecord so we don't have to fetch our own did
    // from the ledger to know which key is associated with the did
    const didsApi = agentContext.dependencyManager.resolve(core_1.DidsApi);
    const didResult = await didsApi.resolve(did);
    if (!didResult.didDocument) {
        throw new core_1.AriesFrameworkError(`Could not resolve did ${did}. ${didResult.didResolutionMetadata.error} ${didResult.didResolutionMetadata.message}`);
    }
    // did:indy dids MUST have a verificationMethod with #verkey
    const verificationMethod = didResult.didDocument.dereferenceKey(`${did}#verkey`);
    const key = (0, core_1.getKeyFromVerificationMethod)(verificationMethod);
    return key;
}
exports.verificationKeyForIndyDid = verificationKeyForIndyDid;
//# sourceMappingURL=didIndyUtil.js.map