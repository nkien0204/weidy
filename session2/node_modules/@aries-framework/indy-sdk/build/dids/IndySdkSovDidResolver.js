"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkSovDidResolver = void 0;
const error_1 = require("../error");
const IndySdkPoolService_1 = require("../ledger/IndySdkPoolService");
const types_1 = require("../types");
const didSovUtil_1 = require("./didSovUtil");
class IndySdkSovDidResolver {
    constructor() {
        this.supportedMethods = ['sov'];
    }
    async resolve(agentContext, did, parsed) {
        const didDocumentMetadata = {};
        try {
            const poolService = agentContext.dependencyManager.resolve(IndySdkPoolService_1.IndySdkPoolService);
            const { pool, nymResponse } = await poolService.getPoolForDid(agentContext, parsed.id);
            const nym = nymResponse !== null && nymResponse !== void 0 ? nymResponse : (await this.getPublicDid(agentContext, pool, parsed.id));
            const endpoints = await this.getEndpointsForDid(agentContext, pool, parsed.id);
            const keyAgreementId = `${parsed.did}#key-agreement-1`;
            const builder = (0, didSovUtil_1.sovDidDocumentFromDid)(parsed.did, nym.verkey);
            if (endpoints) {
                (0, didSovUtil_1.addServicesFromEndpointsAttrib)(builder, parsed.did, endpoints, keyAgreementId);
            }
            return {
                didDocument: builder.build(),
                didDocumentMetadata,
                didResolutionMetadata: { contentType: 'application/did+ld+json' },
            };
        }
        catch (error) {
            return {
                didDocument: null,
                didDocumentMetadata,
                didResolutionMetadata: {
                    error: 'notFound',
                    message: `resolver_error: Unable to resolve did '${did}': ${error}`,
                },
            };
        }
    }
    async getPublicDid(agentContext, pool, did) {
        const indySdkPoolService = agentContext.dependencyManager.resolve(IndySdkPoolService_1.IndySdkPoolService);
        const indySdk = agentContext.dependencyManager.resolve(types_1.IndySdkSymbol);
        const request = await indySdk.buildGetNymRequest(null, did);
        const response = await indySdkPoolService.submitReadRequest(pool, request);
        return await indySdk.parseGetNymResponse(response);
    }
    async getEndpointsForDid(agentContext, pool, unqualifiedDid) {
        var _a;
        const indySdk = agentContext.dependencyManager.resolve(types_1.IndySdkSymbol);
        const indySdkPoolService = agentContext.dependencyManager.resolve(IndySdkPoolService_1.IndySdkPoolService);
        try {
            agentContext.config.logger.debug(`Get endpoints for did '${unqualifiedDid}' from ledger '${pool.didIndyNamespace}'`);
            const request = await indySdk.buildGetAttribRequest(null, unqualifiedDid, 'endpoint', null, null);
            agentContext.config.logger.debug(`Submitting get endpoint ATTRIB request for did '${unqualifiedDid}' to ledger '${pool.didIndyNamespace}'`);
            const response = await indySdkPoolService.submitReadRequest(pool, request);
            if (!response.result.data)
                return null;
            const endpoints = (_a = JSON.parse(response.result.data)) === null || _a === void 0 ? void 0 : _a.endpoint;
            agentContext.config.logger.debug(`Got endpoints '${JSON.stringify(endpoints)}' for did '${unqualifiedDid}' from ledger '${pool.didIndyNamespace}'`, {
                response,
                endpoints,
            });
            return endpoints !== null && endpoints !== void 0 ? endpoints : null;
        }
        catch (error) {
            agentContext.config.logger.error(`Error retrieving endpoints for did '${unqualifiedDid}' from ledger '${pool.didIndyNamespace}'`, {
                error,
            });
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
}
exports.IndySdkSovDidResolver = IndySdkSovDidResolver;
//# sourceMappingURL=IndySdkSovDidResolver.js.map